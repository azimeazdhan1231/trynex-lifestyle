Trynex Lifestyle eCommerce Store – Replit-Friendly Setup Guide with GitHub and Cloudflare

This guide provides a complete, Replit-optimized setup for a fast, free eCommerce store using Cloudflare Pages (frontend), Cloudflare Workers (backend), and Supabase (database), tailored for a Bengali-friendly audience. The frontend and backend are in a single GitHub repository (https://github.com/azimeazdhan1231/trynex-lifestyle.git). All provided credentials (Cloudflare and Supabase) are integrated, with explicit Replit commands for deployment.

Prerequisites





Replit Account: Sign up at replit.com.



GitHub Account: Use azimeazdhan1231 with repository https://github.com/azimeazdhan1231/trynex-lifestyle.git.



Cloudflare Account: Use trynexlifestyle@gmail.com with provided credentials.



Supabase Account: Already set up with provided credentials.

Credentials

Cloudflare





Email: trynexlifestyle@gmail.com



Account ID: 3b31ef5776efad5d989212abaaa8aa2a



Global API Key: eb2805f1cf29db2e59a94687b50e820d84367



Origin CA Key: v1.0-e7408f818808874d7fd2c5cb-c52c88f177d6adc7a38823d72ad542623656ebadee345a843d3b53924f38b25d81eb1d762d3dee8dfacfcb5e0e419998e00a40cf0727b5141f0ea3377667d04940c246d5bc49bfa09d

Note: Keep the Global API Key secure and do not commit it to GitHub.

Supabase





Project URL: https://lxhhgdqfxmeohayceshb.supabase.co



Anon Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4OTk1OTAsImV4cCI6MjA2OTQ3NTU5MH0.gW9X6igqtpAQKutqb4aEEx0VovEZdMp4Gk_R8Glm9Bw



Service Role Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mzg5OTU5MCwiZXhwIjoyMDY5NDc1NTkwfQ.zsYuh0P2S97pLrvY6t1j-qw-j-R_-_5QQX7e423dDeU



Database Password: Amiomito1Amiomito1



Direct Connection: postgresql://postgres:Amiomito1Amiomito1@db.lxhhgdqfxmeohayceshb.supabase.co:5432/postgres



Transaction Pooler: postgresql://postgres.lxhhgdqfxmeohayceshb:Amiomito1Amiomito1@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres



JWT Secret: 5VNzsx45XYVOB9JBObNG3Cvi/4VGkiF+WWmImSwbYnzk4tSHDYGtLDPP2qmZWzvJ8ayuP5zUI/wtHHFPsDHyNQ==

Step 1: Set Up Project in Replit





Create a New Repl:





Go to Replit and create a new Repl.



Choose Node.js template (required for Wrangler and Git).



Name the Repl trynex-store.



Set Up Project Structure: Run in the Replit Shell:

mkdir -p frontend/assets/images frontend/scripts worker
touch frontend/assets/styles.css
touch frontend/scripts/main.js frontend/scripts/cart.js frontend/scripts/admin.js
touch frontend/index.html frontend/products.html frontend/product.html frontend/cart.html
touch frontend/checkout.html frontend/success.html frontend/track.html frontend/admin.html frontend/login.html
touch frontend/package.json
touch worker/worker.js worker/wrangler.toml
touch .gitignore README.md



Configure .gitignore: Edit .gitignore:

node_modules/
.env
worker/wrangler.toml



Configure package.json: Edit frontend/package.json:

{
  "name": "trynex-store",
  "version": "1.0.0",
  "description": "Trynex Lifestyle eCommerce Store",
  "scripts": {
    "build": "echo 'No build required' && exit 0"
  }
}



Initialize Git:

git init
git add .
git commit -m "Initial project structure"
git remote add origin https://github.com/azimeazdhan1231/trynex-lifestyle.git
git push -u origin main





If authentication fails, create a GitHub Personal Access Token (Settings > Developer settings > Personal access tokens > Generate new token, select repo scope) and set:

export GITHUB_TOKEN="your-token"
git remote set-url origin https://azimeazdhan1231:$GITHUB_TOKEN@github.com/azimeazdhan1231/trynex-lifestyle.git
git push -u origin main

Step 2: Supabase Database Setup





Install psql in Replit:

sudo apt-get update
sudo apt-get install -y postgresql-client



Create Database Schema: Run in the Replit Shell:

psql "postgresql://postgres:Amiomito1Amiomito1@db.lxhhgdqfxmeohayceshb.supabase.co:5432/postgres" -c "
CREATE TABLE products (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  price NUMERIC NOT NULL,
  image_url TEXT,
  category TEXT,
  stock INTEGER NOT NULL
);
CREATE TABLE orders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tracking_id TEXT UNIQUE NOT NULL,
  customer_name TEXT NOT NULL,
  district TEXT NOT NULL,
  thana TEXT NOT NULL,
  phone TEXT NOT NULL,
  payment_info JSONB,
  status TEXT DEFAULT 'pending',
  items JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE offers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  description TEXT,
  expiry TIMESTAMP WITH TIME ZONE
);
CREATE TABLE admins (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL
);
CREATE POLICY \"Public read products\" ON products FOR SELECT USING (true);
CREATE POLICY \"Public read offers\" ON offers FOR SELECT USING (true);
CREATE POLICY \"Authenticated insert orders\" ON orders FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY \"Admin access only\" ON admins FOR ALL USING (auth.role() = 'service_role');
"



Alternative: Supabase Dashboard:





Log in to https://lxhhgdqfxmeohayceshb.supabase.co.



Go to SQL Editor and run the SQL above (excluding psql command).



Verify RLS policies in Authentication > Policies.

Step 3: Frontend Code (Cloudflare Pages)

frontend/index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Trynex Lifestyle – Custom Gift Store</title>
  <link href="https://fonts.googleapis.com/css2?family=Hind+Siliguri&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/styles.css">
</head>
<body>
  <header>
    <h1>Trynex Lifestyle</h1>
    <nav>
      <a href="/index.html">Home</a>
      <a href="/products.html">Products</a>
      <a href="/cart.html">Cart</a>
      <a href="/track.html">Track Order</a>
    </nav>
  </header>
  <div id="product-list"></div>
  <div id="offer-popup" style="display: none;">
    <h3 id="offer-title"></h3>
    <p id="offer-description"></p>
  </div>
  <script src="/scripts/main.js"></script>
</body>
</html>

frontend/assets/styles.css

body {
  font-family: 'Hind Siliguri', sans-serif;
  margin: 0;
  padding: 0;
}
header {
  background: #333;
  color: white;
  padding: 1rem;
  text-align: center;
}
nav a {
  color: white;
  margin: 0 1rem;
  text-decoration: none;
}
#product-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  padding: 1rem;
}
.product-card {
  border: 1px solid #ddd;
  padding: 1rem;
  text-align: center;
}
#offer-popup {
  position: fixed;
  top: 20px;
  right: 20px;
  background: #fff;
  border: 1px solid #333;
  padding: 1rem;
  box-shadow: 0 0 10px rgba(0,0,0,0.2);
}

frontend/scripts/main.js

const SUPABASE_URL = 'https://lxhhgdqfxmeohayceshb.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4OTk1OTAsImV4cCI6MjA2OTQ3NTU5MH0.gW9X6igqtpAQKutqb4aEEx0VovEZdMp4Gk_R8Glm9Bw';

async function loadProducts() {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/products?select=*`, {
    headers: {
      'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
      'Apikey': SUPABASE_ANON_KEY
    }
  });
  const products = await response.json();
  const productList = document.getElementById('product-list');
  productList.innerHTML = products.map(product => `
    <div class="product-card">
      <img src="${product.image_url}" alt="${product.name}" width="100">
      <h3>${product.name}</h3>
      <p>${product.price}৳</p>
      <button onclick="addToCart('${product.id}', '${product.name}', ${product.price})">Add to Cart</button>
      <a href="https://wa.me/8801904068947?text=I%20want%20to%20order%20the%20${encodeURIComponent(product.name)}%20for%20${product.price}৳">Order via WhatsApp</a>
    </div>
  `).join('');
}

async function loadOffers() {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/offers?expiry=gt.now()&select=*`, {
    headers: {
      'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
      'Apikey': SUPABASE_ANON_KEY
    }
  });
  const offers = await response.json();
  if (offers.length > 0) {
    const popup = document.getElementById('offer-popup');
    popup.style.display = 'block';
    document.getElementById('offer-title').textContent = offers[0].title;
    document.getElementById('offer-description').textContent = offers[0].description;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  loadProducts();
  loadOffers();
});

frontend/scripts/cart.js

function addToCart(id, name, price) {
  let cart = JSON.parse(localStorage.getItem('cart') || '[]');
  const existing = cart.find(item => item.id === id);
  if (existing) {
    existing.quantity += 1;
  } else {
    cart.push({ id, name, price, quantity: 1 });
  }
  localStorage.setItem('cart', JSON.stringify(cart));
  alert('Added to cart!');
}

function displayCart() {
  const cart = JSON.parse(localStorage.getItem('cart') || '[]');
  const cartList = document.getElementById('cart-list');
  cartList.innerHTML = cart.map(item => `
    <div>
      <p>${item.name} - ${item.price}৳ x ${item.quantity}</p>
      <button onclick="removeFromCart('${item.id}')">Remove</button>
    </div>
  `).join('');
}

function removeFromCart(id) {
  let cart = JSON.parse(localStorage.getItem('cart') || '[]');
  cart = cart.filter(item => item.id !== id);
  localStorage.setItem('cart', JSON.stringify(cart));
  displayCart();
}

Step 4: Backend Code (Cloudflare Workers)

worker/worker.js

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const path = url.pathname;

  if (request.method === 'GET' && path === '/api/products') {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/products?select=*`, {
      headers: { 'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`, 'Apikey': SUPABASE_SERVICE_KEY }
    });
    return new Response(JSON.stringify(await response.json()), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST' && path === '/api/place-order') {
    const data = await request.json();
    const trackingId = `TRX${Date.now()}${Math.floor(Math.random() * 1000)}`;
    const response = await fetch(`${SUPABASE_URL}/rest/v1/orders`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'Apikey': SUPABASE_SERVICE_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ ...data, tracking_id: trackingId })
    });
    return new Response(JSON.stringify({ success: true, tracking_id: trackingId }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'GET' && path === '/api/track-order') {
    const trackingId = url.searchParams.get('id');
    const response = await fetch(`${SUPABASE_URL}/rest/v1/orders?tracking_id=eq.${trackingId}&select=*`, {
      headers: { 'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`, 'Apikey': SUPABASE_SERVICE_KEY }
    });
    return new Response(JSON.stringify(await response.json()), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST' && path === '/api/admin-login') {
    const { email, password } = await request.json();
    const response = await fetch(`${SUPABASE_URL}/rest/v1/admins?email=eq.${email}&select=*`, {
      headers: { 'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`, 'Apikey': SUPABASE_SERVICE_KEY }
    });
    const admin = (await response.json())[0];
    if (admin && admin.password === password) { // Note: Use hashed passwords in production
      return new Response(JSON.stringify({ success: true }), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    return new Response(JSON.stringify({ success: false }), { status: 401 });
  }

  if (request.method === 'GET' && path === '/api/get-offers') {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/offers?expiry=gt.now()&select=*`, {
      headers: { 'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`, 'Apikey': SUPABASE_SERVICE_KEY }
    });
    return new Response(JSON.stringify(await response.json()), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  return new Response('Trynex Worker is running!');
}

worker/wrangler.toml

name = "trynex-worker"
main = "worker.js"
compatibility_date = "2025-07-31"
account_id = "3b31ef5776efad5d989212abaaa8aa2a"

[vars]
SUPABASE_URL = "https://lxhhgdqfxmeohayceshb.supabase.co"
SUPABASE_SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mzg5OTU5MCwiZXhwIjoyMDY5NDc1NTkwfQ.zsYuh0P2S97pLrvY6t1j-qw-j-R_-_5QQX7e423dDeU"

Step 5: Additional Frontend Features

frontend/checkout.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Checkout – Trynex Lifestyle</title>
  <link rel="stylesheet" href="/assets/styles.css">
</head>
<body>
  <h1>Checkout</h1>
  <form id="checkout-form">
    <input type="text" id="customer-name" placeholder="Full Name" required>
    <select id="district" required>
      <option value="">Select District</option>
      <option value="Dhaka">Dhaka</option>
      <!-- Add more districts -->
    </select>
    <select id="thana" required>
      <option value="">Select Thana</option>
      <!-- Dynamically populated -->
    </select>
    <input type="tel" id="phone" placeholder="Phone Number" required>
    <p>Payment: Cash on Delivery</p>
    <button type="submit">Place Order</button>
  </form>
  <script src="/scripts/main.js"></script>
  <script>
    document.getElementById('checkout-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      const data = {
        customer_name: document.getElementById('customer-name').value,
        district: document.getElementById('district').value,
        thana: document.getElementById('thana').value,
        phone: document.getElementById('phone').value,
        items: cart
      };
      const response = await fetch('https://trynex-worker.trynexlifestyle.workers.dev/api/place-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await response.json();
      if (result.success) {
        localStorage.removeItem('cart');
        window.location.href = `/success.html?tracking_id=${result.tracking_id}`;
      }
    });
  </script>
</body>
</html>

frontend/admin.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Admin Panel – Trynex Lifestyle</title>
  <link rel="stylesheet" href="/assets/styles.css">
</head>
<body>
  <h1>Admin Panel</h1>
  <div id="orders"></div>
  <script src="/scripts/admin.js"></script>
</body>
</html>

frontend/scripts/admin.js

const SUPABASE_URL = 'https://lxhhgdqfxmeohayceshb.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mzg5OTU5MCwiZXhwIjoyMDY5NDc1NTkwfQ.zsYuh0P2S97pLrvY6t1j-qw-j-R_-_5QQX7e423dDeU';

async function loadOrders() {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/orders?select=*`, {
    headers: { 'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`, 'Apikey': SUPABASE_SERVICE_KEY }
  });
  const orders = await response.json();
  document.getElementById('orders').innerHTML = orders.map(order => `
    <div>
      <p>Order #${order.tracking_id}</p>
      <p>Status: ${order.status}</p>
      <button onclick="updateStatus('${order.id}', 'shipped')">Mark as Shipped</button>
    </div>
  `).join('');
}

async function updateStatus(orderId, status) {
  await fetch(`${SUPABASE_URL}/rest/v1/orders?id=eq.${orderId}`, {
    method: 'PATCH',
    headers: {
      'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      'Apikey': SUPABASE_SERVICE_KEY,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ status })
  });
  loadOrders();
}

document.addEventListener('DOMContentLoaded', loadOrders);

Step 6: Deployment from Replit

Deploy Frontend to Cloudflare Pages





Push Code to GitHub:

git add .
git commit -m "Initial project setup"
git push origin main



Connect to Cloudflare Pages:





Log in to Cloudflare with trynexlifestyle@gmail.com.



Go to Pages > Create a project > Connect to Git.



Select azimeazdhan1231/trynex-lifestyle repository.



Configure:





Project name: trynex-lifestyle



Production branch: main



Build command: npm run build



Build output directory: frontend



Click Save and Deploy.



Note the deployed URL (e.g., https://trynex-lifestyle.pages.dev).



Update Worker URL:





After deploying the Worker (Step 6.2), replace https://trynex-worker.trynexlifestyle.workers.dev in frontend/scripts/main.js and frontend/checkout.html with the actual Worker URL (e.g., https://trynex-worker.your-username.workers.dev).



Command in Replit Shell:

sed -i 's|https://trynex-worker.trynexlifestyle.workers.dev|https://trynex-worker.your-username.workers.dev|g' frontend/scripts/main.js frontend/checkout.html
git add .
git commit -m "Update Worker URL"
git push origin main

Deploy Backend to Cloudflare Workers





Install Wrangler in Replit:

npm install -g wrangler



Authenticate Wrangler:





Store credentials in Replit’s Secrets tab:





Go to Replit > Tools > Secrets.



Add:





CF_API_TOKEN = eb2805f1cf29db2e59a94687b50e820d84367



CF_ACCOUNT_ID = 3b31ef5776efad5d989212abaaa8aa2a



Alternatively, set environment variables:

export CF_API_TOKEN="eb2805f1cf29db2e59a94687b50e820d84367"
export CF_ACCOUNT_ID="3b31ef5776efad5d989212abaaa8aa2a"



Deploy Worker:

cd worker
wrangler deploy





Note the deployed Worker URL (e.g., https://trynex-worker.your-username.workers.dev).



Map Worker to Routes:





Go to Cloudflare Dashboard > Pages > trynex-lifestyle > Settings > Functions.



Add a route:





Route: https://trynex-lifestyle.pages.dev/api/*



Worker: trynex-worker



Save the configuration.

Step 7: WhatsApp Integration

In frontend/product.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Product – Trynex Lifestyle</title>
  <link rel="stylesheet" href="/assets/styles.css">
</head>
<body>
  <h1>Product Details</h1>
  <div id="product-details"></div>
  <a href="https://wa.me/8801904068947?text=I%20want%20to%20order%20the%20${encodeURIComponent('productName')}%20for%20${'productPrice'}৳">Order via WhatsApp</a>
  <script src="/scripts/main.js"></script>
</body>
</html>

Step 8: Testing and Debugging





Test Frontend Locally:





In Replit, click Run to preview at https://trynex-store.your-replit-username.repl.co.



Test Worker Locally:

cd worker
wrangler dev



Test Supabase APIs:

curl -X GET "https://lxhhgdqfxmeohayceshb.supabase.co/rest/v1/products?select=*" \
-H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4OTk1OTAsImV4cCI6MjA2OTQ3NTU5MH0.gW9X6igqtpAQKutqb4aEEx0VovEZdMp4Gk_R8Glm9Bw" \
-H "Apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aGhnZHFmeG1lb2hheWNlc2hiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4OTk1OTAsImV4cCI6MjA2OTQ3NTU5MH0.gW9X6igqtpAQKutqb4aEEx0VovEZdMp4Gk_R8Glm9Bw"

Pro Tips





Replit Secrets: Store sensitive keys in Replit’s Secrets tab:





SUPABASE_SERVICE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...



CF_API_TOKEN = eb2805f1cf29db2e59a94687b50e820d84367



CF_ACCOUNT_ID = 3b31ef5776efad5d989212abaaa8aa2a



Update worker.js to use const SUPABASE_SERVICE_KEY = env.SUPABASE_SERVICE_KEY;.



Security: Hash admin passwords in production using Supabase’s auth or bcrypt.



Caching: Use Cloudflare KV for product data caching:

wrangler kv:namespace create "PRODUCT_CACHE"



Replit Limitations: Monitor memory usage on Replit’s free tier.

Final Notes





The repository https://github.com/azimeazdhan1231/trynex-lifestyle.git contains both /frontend and /worker.



Replace https://trynex-worker.your-username.workers.dev with the actual Worker URL after deployment.



All credentials are provided, and no additional data is needed.



For separate repositories, create trynex-lifestyle-frontend and trynex-lifestyle-worker and adjust deployment steps.



Test thoroughly at https://trynex-lifestyle.pages.dev and verify API calls with curl or Postman.