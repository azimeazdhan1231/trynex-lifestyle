Pasted-Compress-Images-Use-TinyPNG-or-Squoosh-to-convert-product-images-to-WebP-or-AVIF-Aim-for-image-si-1753991685548_1753991685548.txt
Compress Images:

Use TinyPNG or Squoosh to convert product images to WebP or AVIF.
Aim for image sizes under 100KB where possible.


Implement Lazy Loading:

Add loading="lazy" to <img> tags for product images below the fold.
Example: <img src="product.jpg" loading="lazy" alt="Product Name">.


Use Responsive Images:

Add srcset to serve smaller images for mobile devices.
Example: <img src="product-small.webp" srcset="product-large.webp 1024w, product-small.webp 480w" sizes="(max-width: 600px) 480px, 1024px">.


Paginate or Lazy-Load Products:

Limit initial product display to 10–15 items.
Use pagination (e.g., “Next”/”Previous” buttons) or infinite scroll with a library like react-infinite-scroll-component if using React.


Minify Assets:

Use Vite or Webpack to minify CSS, JavaScript, and HTML during build.
If using Tailwind CSS, run PurgeCSS to remove unused styles.


Cache Static Assets:

Set Cache-Control: max-age=31536000 for images, CSS, and JS in your Cloudflare Pages settings or via a _headers file.
Example _headers file:
text/*
  Cache-Control: max-age=31536000



Optimize API Calls:

If fetching product data dynamically, limit API responses to essential fields (e.g., use GraphQL or filter JSON).
Cache API responses in Cloudflare using Cache API or a Cloudflare Worker.


Use Static Site Generation (SSG):

If using Next.js, Gatsby, or Astro, pre-render product pages at build time.
Example for Next.js: Use getStaticProps to fetch product data during build.


Inline Critical CSS:

Extract CSS for above-the-fold content (e.g., product grid) and inline it in <style> tags.
Defer non-critical CSS with <link rel="stylesheet" media="print" onload="this.media='all'">.


Remove Unused Plugins:

Audit third-party scripts (e.g., analytics, product sliders) using Chrome DevTools.
Remove or replace heavy plugins with lightweight alternatives.


Test Performance:

Run Google PageSpeed Insights or Lighthouse on your product pages.
Focus on improving Largest Contentful Paint (LCP) to under 2.5 seconds.


Set Up Cloudflare Page Rules:

In Cloudflare dashboard, create a Page Rule for your-site.pages.dev/* to cache static assets (Cache Level: Cache Everything).


Monitor with RUM:

Use Cloudflare Observatory (in Cloudflare dashboard) to track performance metrics.
Schedule weekly checks to ensure new products don’t degrade performance.